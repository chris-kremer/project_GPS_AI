{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a542d5a4-39d5-43b4-856f-71aa339cf9af",
   "metadata": {},
   "outputs": [],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Define your portfolio\n",
    "portfolio = [\n",
    "    {\"Ticker\": \"URTH\", \"Quantity\": 480},\n",
    "    {\"Ticker\": \"WFC\", \"Quantity\": 400},\n",
    "    {\"Ticker\": \"HLBZF\", \"Quantity\": 185},\n",
    "    {\"Ticker\": \"C\", \"Quantity\": 340},\n",
    "    {\"Ticker\": \"BPAQF\", \"Quantity\": 2000},\n",
    "    {\"Ticker\": \"POAHF\", \"Quantity\": 150},\n",
    "    {\"Ticker\": \"EXV1.DE\", \"Quantity\": 284},\n",
    "    {\"Ticker\": \"1COV.DE\", \"Quantity\": 100},\n",
    "    {\"Ticker\": \"SPY\", \"Quantity\": 10},\n",
    "    {\"Ticker\": \"HYMTF\", \"Quantity\": 100},\n",
    "    {\"Ticker\": \"SHEL\", \"Quantity\": 75},\n",
    "    {\"Ticker\": \"DAX\", \"Quantity\": 6},\n",
    "    {\"Ticker\": \"PLTR\", \"Quantity\": 100},\n",
    "    {\"Ticker\": \"UQ2B.DU\", \"Quantity\": 5},\n",
    "    {\"Ticker\": \"DB\", \"Quantity\": 1},\n",
    "    {\"Ticker\": \"GS\", \"Quantity\": 9},\n",
    "    {\"Ticker\": \"MBG.DE\", \"Quantity\": 50},\n",
    "]\n",
    "cash_position = 17000  # Cash position in USD\n",
    "\n",
    "def fetch_current_prices(tickers):\n",
    "    prices = {}\n",
    "    for ticker in tickers:\n",
    "        try:\n",
    "            stock = yf.Ticker(ticker)\n",
    "            data = stock.history(period='1d')\n",
    "            if not data.empty:\n",
    "                current_price = data['Close'][0]\n",
    "                prices[ticker] = current_price\n",
    "            else:\n",
    "                prices[ticker] = None\n",
    "        except Exception as e:\n",
    "            prices[ticker] = None\n",
    "    return prices\n",
    "\n",
    "def calculate_portfolio_value(portfolio, prices, cash):\n",
    "    total_value = cash\n",
    "    for asset in portfolio:\n",
    "        ticker = asset[\"Ticker\"]\n",
    "        quantity = asset[\"Quantity\"]\n",
    "        price = prices.get(ticker)\n",
    "        if price is not None:\n",
    "            value = price * quantity\n",
    "            total_value += value\n",
    "    return total_value\n",
    "\n",
    "def display_annika_anteil():\n",
    "    tickers = [asset[\"Ticker\"] for asset in portfolio]\n",
    "    prices = fetch_current_prices(tickers)\n",
    "    total = calculate_portfolio_value(portfolio, prices, cash_position)\n",
    "    \n",
    "    percentage = 0.141974937637508 / 100\n",
    "    percentage_of_total = total * percentage\n",
    "    \n",
    "    result = f\"Annika Anteil: {percentage_of_total:,.2f} EUR\"\n",
    "    \n",
    "    # Create a tkinter window\n",
    "    root = tk.Tk()\n",
    "    root.title(\"Annika Anteil\")\n",
    "    \n",
    "    # Add a label with the result\n",
    "    label = tk.Label(root, text=result, font=(\"Arial\", 14), padx=20, pady=20)\n",
    "    label.pack()\n",
    "\n",
    "    # Show the result in a message box\n",
    "    messagebox.showinfo(\"Portfolio Value\", result)\n",
    "    \n",
    "    root.mainloop()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    display_annika_anteil()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
